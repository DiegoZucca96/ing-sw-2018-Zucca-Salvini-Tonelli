package ingsw.model;

import ingsw.observers.DraftPoolObserver;
import ingsw.observers.Observer;
import java.util.ArrayList;

/**
 * This class represents the draft pool of the game. Through diceBag this class throws dice
 * and puts the ones in excess in te RoundTrack.
 * Author: Elio Salvini
 *
 * @see RoundTrack
 * @see DiceBag
 */
public class DraftPool {

    private ArrayList<Die> diceList;    //list that contains the thrown dice
    private DiceBag diceBag;
    private RoundTrack roundTrack;
    private Observer viewObserver;      //observer of this class
    private int begin;

    /**
     * Constructor of the class
     *
     * @param roundTrack reference to the round track of the game
     */
    public  DraftPool(RoundTrack roundTrack){
        diceList = new ArrayList<>();
        diceBag = new DiceBag();
        this.roundTrack = roundTrack;
        viewObserver = new DraftPoolObserver();
        begin = 0;
    }

    /**
     * Simply getter method
     * @return the dicebag
     */
    public DiceBag getDiceBag() {
        return diceBag;
    }

    /**
     * Simply setter method, exclusively used for testing
     * @param diceBag it is the dicebag that has to be set
     */
    public void setDiceBag(DiceBag diceBag) {
        this.diceBag = diceBag;
    }

    /**
     * Throws nDice dice that are generated by diceBag
     * @param nDice number of dice thrown
     * @return list that contains the
     */
    public ArrayList<Die> throwsDice(int nDice){
        for(int i=0; i<nDice; i++){
            diceList.add(diceBag.randomDice());
        }
        if(begin==1)
            notifyViewObserver();
        else
            begin++;
        return diceList;
    }

    /**
     * This method change a single die with a new one
     * @param index it is the position of the die that has to be set
     * @return the new die
     */
    public Die reThrowsDie(int index){
        Die die = diceBag.randomDice();
        diceList.set(index, die);
        notifyViewObserver();
        return die;
    }

    /**
     * Getter
     * @param index position of the requested die in diceList
     * @return die in position index in diceList
     */
    public Die getDie(int index){
        try{
            return diceList.get(index);
        }catch (IndexOutOfBoundsException e){
            return null;
        }
    }

    /**
     * It calls get(index) and adds a fake die to fill the list
     * @param index position of the requested die
     * @return die in position index in diceList
     */
    public Die takeDie(int index){
        Die result = getDie(index);
        try{
            diceList.set(index,new Die(0,Color.WHITE));
            notifyViewObserver();
        } catch(IndexOutOfBoundsException e){
            return null;
        }
        return result;
    }

    /**
     * It adds a new die in the draft pool
     * @param index position where to add the new die
     * @param die die that is added in the draft pool
     */
    public void setDie(int index,Die die){
        diceList.set(index,die);
        notifyViewObserver();
    }

    /**
     * Simply getter method
     * @return the size of the dicelist
     */
    public int getDiceListSize(){
        return diceList.size();
    }

    /**
     * This method puts dice that are in diceList in roundTrack, excluding the fake ones
     */
    public void cleanDraftPool(){
        if(!diceList.isEmpty()){
            for(int i=diceList.size(); i>0;i--){
                Die die = diceList.get(i-1);
                if(die != null && (die.getNumber()==0 || String.valueOf(die.getColor()).equalsIgnoreCase("WHITE"))){
                    diceList.remove(die);
                }
            }
            int size = diceList.size();
            for(int i=0; i<size; i++){
                roundTrack.addDie(getDie(0), roundTrack.getRound());
                diceList.remove(0);
            }
            notifyViewObserver();
        }
    }

    /**
     * It throws again all dice in diceList without taking others dice from diceBag
     * @param coordinates it is a list of coordinate about the real dice (not the fake ones)
     * @see ingsw.model.toolcard.Tool7
     */
    public void refreshDraftPool(ArrayList<Coordinate> coordinates){
        for(Coordinate c : coordinates){
            RandomGenerator rg = new RandomGenerator(6);
            diceList.get(c.getY()).setNumber(rg.random());
        }
        notifyViewObserver();
    }

    /**
     * This method notifies changes in this object to viewObserver
     */
    public void notifyViewObserver(){
        viewObserver.update(this, ViewData.instance());
    }

}
